"""
Django settings for dc project.

Generated by 'django-admin startproject' using Django 1.9.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import kombu
from celery.schedules import schedule

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'v3!bq2a5w!ps=ms8=sr%(-&!07a4xl&2pv^k#o2li=(_=tua3t'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'dc.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dc.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'

# Rabbit MQ and Celery settings

RABBIT_MQ_USER = "dguest"
RABBIT_MQ_PASSWORD = "guest"

BROKER_URL = "amqp://{user}:{password}@172.17.0.4:5672//".format(
    user=RABBIT_MQ_USER, password=RABBIT_MQ_PASSWORD)
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_RESULT_BACKEND = 'amqp'
CELERY_TIMEZONE = TIME_ZONE
CELERY_RESULT_PERSISTENT = False

EMAIL_QUEUE = 'email_queue'
DEFAULT_QUEUE = 'default_queue'
BEAT_QUEUE = 'beat_queue'

DEFAULT_EXCHANGE = kombu.Exchange("default_exchange")
BEAT_EXCHANGE = kombu.Exchange("default_exchange")

CELERY_QUEUES = (
    kombu.Queue(DEFAULT_QUEUE, DEFAULT_EXCHANGE,
                routing_key="task.default"),
    kombu.Queue(EMAIL_QUEUE, DEFAULT_EXCHANGE, routing_key='email_task.send_one_time_email'),
    kombu.Queue(BEAT_QUEUE, BEAT_EXCHANGE, routing_key='beat_task.send_scheduled_emails'),
)

CELERY_ROUTES = {
    'marketing.tasks.send_one_time_email': {
        'queue': EMAIL_QUEUE, 'routing_key': 'email_task.send_one_time_email'},
    'marketing.tasks.send_scheduled_emails': {
        'queue': BEAT_QUEUE, 'routing_key': 'beat_task.send_scheduled_emails'},
}

CELERYBEAT_SCHEDULE = {
    'send_scheduled_emails': {
        'task': 'marketing.tasks.send_scheduled_emails',
        'schedule': schedule(run_every=360),  # time in seconds
        'args': (),
        'options': {'retry': False}
    },
}

ONE_TIME_EMAIL_SENDING_TIME_LIMIT = 60
SCHEDULED_EMAILS_SENDING_TIME_LIMIT = 240
